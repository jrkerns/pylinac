image: ghcr.io/astral-sh/uv:python3.11-bookworm-slim


definitions:
  caches:
    testfiles: tests_basic/test_files
    precommit: ~/.cache/pre-commit
    uv: ~/.cache/uv
    nox-build-docs: .nox/build_docs
    starshot: tests_basic/test_files/Starshot
    picket-fence: tests_basic/test_files/picket_fence
    planar-imaging: tests_basic/test_files/planar_imaging
    quart: tests_basic/test_files/CBCT/Quart
    plan-generator: tests_basic/test_files/plan_generator
    winston-lutz: tests_basic/test_files/Winston-Lutz
    machine-logs: tests_basic/test_files/mlc_logs
    catphan503: tests_basic/test_files/CBCT/CatPhan_503
    catphan504: tests_basic/test_files/CBCT/CatPhan_504
    catphan604: tests_basic/test_files/CBCT/CatPhan_604
    catphan600: tests_basic/test_files/CBCT/CatPhan_600
    acr: tests_basic/test_files/ACR
    cheese: tests_basic/test_files/Tomo
    vmat: tests_basic/test_files/VMAT
    nuclear: tests_basic/test_files/nuclear

  steps:
    - step: &bb-runner
        runs-on:
          - self.hosted
          - linux
          - radmachine
    - step: &pre-commit-checks-and-setup
        name: Pre-commit checks & env setup
        <<: *bb-runner
        script:
          - apt-get update
          - apt-get -y install git
          - uv venv
          - uv pip install . --group dev
          - uv pip freeze
          - uv tool run pre-commit run --all-files
        caches:
          - precommit
          - uv
        artifacts:
          - .venv/**
    - step: &push-to-github
        name: Push to Github
        <<: *bb-runner
        clone:
          depth: full
        script:
          - apt update
          - apt install git -y
          - git push git@github.com:jrkerns/pylinac.git $BITBUCKET_BRANCH
    - step: &build-docs
        name: Build Docs
        <<: *bb-runner
        condition:
          changesets:
            includePaths:
              - "**.py"
              - "docs/**"
        script:
          - uv run nox -s build_docs
        caches:
          - nox-build-docs
    - step: &cbct-tests
        name: Run CBCT Tests
        <<: *bb-runner
        script:
          # set up memory monitoring
          - apt-get update && apt-get install -y --no-install-recommends procps jq
          - chmod +x memory_monitor.sh
          - nohup ./memory_monitor.sh &
          - MONITOR_PID=$!
          - uv run pytest tests_basic/test_cbct.py -n 3 --junitxml=./test-reports/pytest_results.xml
          # clean up memory monitor
          - kill $MONITOR_PID
        caches:
          - catphan503
          - catphan504
          - catphan600
          - catphan604
        condition:
          changesets:
            includePaths:
              - "pylinac/core/**"
              - "tests_basic/test_cbct.py"
              - "pylinac/ct.py"
        artifacts:
          - memory_usage.log
    - step: &quart-tests
        name: Run Quart Tests
        <<: *bb-runner
        script:
          - # set up memory monitoring
          - apt-get update && apt-get install -y --no-install-recommends procps jq
          - chmod +x memory_monitor.sh
          - nohup ./memory_monitor.sh &
          - MONITOR_PID=$!
          - uv run pytest tests_basic/test_quart.py -n 3 --junitxml=./test-reports/pytest_results.xml
          # clean up memory monitor
          - kill $MONITOR_PID
        artifacts:
          - memory_usage.log
        caches:
          - quart
        condition:
          changesets:
            includePaths:
              - "pylinac/core/**"
              - "tests_basic/test_quart.py"
              - "pylinac/quart.py"
              - "pylinac/ct.py"
    - step: &acr-tests
        name: Run ACR CT/MRI Tests
        <<: *bb-runner
        script:
          - # set up memory monitoring
          - apt-get update && apt-get install -y --no-install-recommends procps jq
          - chmod +x memory_monitor.sh
          - nohup ./memory_monitor.sh &
          - MONITOR_PID=$!
          - uv run pytest tests_basic/test_acr.py -n 3 --junitxml=./test-reports/pytest_results.xml
          # clean up memory monitor
          - kill $MONITOR_PID
        artifacts:
          - memory_usage.log
        caches:
          - acr
        condition:
          changesets:
            includePaths:
              - "pylinac/core/**"
              - "tests_basic/test_acr.py"
              - "pylinac/ct.py"
              - "pylinac/acr.py"
    - step: &cheese-tests
        name: Run Cheese Phantom Tests
        <<: *bb-runner
        script:
          - # set up memory monitoring
          - apt-get update && apt-get install -y --no-install-recommends procps jq
          - chmod +x memory_monitor.sh
          - nohup ./memory_monitor.sh &
          - MONITOR_PID=$!
          - uv run pytest tests_basic/test_cheese.py -n 3 --junitxml=./test-reports/pytest_results.xml
          # clean up memory monitor
          - kill $MONITOR_PID
        artifacts:
          - memory_usage.log
        caches:
          - cheese
        condition:
          changesets:
            includePaths:
              - "pylinac/core/**"
              - "tests_basic/test_cheese.py"
              - "pylinac/ct.py"
              - "pylinac/cheese.py"
    - step: &planar-tests
        name: Run Planar Imaging Tests
        <<: *bb-runner
        script:
          - # set up memory monitoring
          - apt-get update && apt-get install -y --no-install-recommends procps jq
          - chmod +x memory_monitor.sh
          - nohup ./memory_monitor.sh &
          - MONITOR_PID=$!
          - uv run pytest tests_basic/test_planar_imaging.py --junitxml=./test-reports/pytest_results.xml
          # clean up memory monitor
          - kill $MONITOR_PID
        artifacts:
          - memory_usage.log
        caches:
          - planar-imaging
        condition:
          changesets:
            includePaths:
              - "pylinac/core/**"
              - "tests_basic/test_planar_imaging.py"
              - "pylinac/planar_imaging.py"
    - step: &dlg-tests
        name: Run DLG Tests
        <<: *bb-runner
        script:
          - uv run pytest tests_basic/test_dlg.py --junitxml=./test-reports/pytest_results.xml
        caches:
          - testfiles
        condition:
          changesets:
            includePaths:
              - "pylinac/core/**"
              - "tests_basic/test_dlg.py"
              - "pylinac/dlg.py"
    - step: &field-analysis-tests
        name: Run Field Analysis Tests
        <<: *bb-runner
        script:
          - uv run pytest tests_basic/test_field_analysis.py --junitxml=./test-reports/pytest_results.xml
        caches:
          - testfiles
        condition:
          changesets:
            includePaths:
              - "pylinac/core/**"
              - "tests_basic/test_field_analysis.py"
              - "tests_basic/test_field_profile_analysis.py"
              - "pylinac/field_profile_analysis.py"
              - "pylinac/field_analysis.py"
    - step: &machine-log-tests
        name: Run Machine Logs Tests
        <<: *bb-runner
        script:
          - uv run pytest tests_basic/test_logs.py --junitxml=./test-reports/pytest_results.xml
        caches:
          - machine-logs
        condition:
          changesets:
            includePaths:
              - "pylinac/core/**"
              - "tests_basic/test_lost.py"
              - "pylinac/log_analyzer.py"
    - step: &picket-fence-tests
        name: Run Picket Fence Tests
        <<: *bb-runner
        script:
          - # set up memory monitoring
          - apt-get update && apt-get install -y --no-install-recommends procps jq
          - chmod +x memory_monitor.sh
          - nohup ./memory_monitor.sh &
          - MONITOR_PID=$!
          - uv run pytest tests_basic/test_picketfence.py -n 3 --junitxml=./test-reports/pytest_results.xml
          # clean up memory monitor
          - kill $MONITOR_PID
        artifacts:
          - memory_usage.log
        caches:
          - picket-fence
        condition:
          changesets:
            includePaths:
              - "pylinac/core/**"
              - "tests_basic/test_picketfence.py"
              - "pylinac/picketfence.py"
    - step: &starshot-tests
        name: Run Starshot Tests
        <<: *bb-runner
        script:
          - uv run pytest tests_basic/test_starshot.py -n 3 --junitxml=./test-reports/pytest_results.xml
        caches:
          - starshot
        condition:
          changesets:
            includePaths:
              - "pylinac/core/**"
              - "tests_basic/test_starshot.py"
              - "pylinac/starshot.py"
    - step: &calibration-tests
        name: Run TG-51/TRS-398 Tests
        <<: *bb-runner
        script:
          - uv run pytest tests_basic/test_tg51.py tests_basic/test_trs398.py --junitxml=./test-reports/pytest_results.xml
        condition:
          changesets:
            includePaths:
              - "pylinac/core/**"
              - "tests_basic/test_tg51.py"
              - "tests_basic/test_trs398.py"
              - "pylinac/vmat.py"
    - step: &vmat-tests
        name: Run VMAT Tests
        <<: *bb-runner
        script:
          - uv run pytest tests_basic/test_vmat.py --junitxml=./test-reports/pytest_results.xml
        caches:
          - vmat
        condition:
          changesets:
            includePaths:
              - "pylinac/core/**"
              - "tests_basic/test_vmat.py"
              - "pylinac/vmat.py"
    - step: &winston-lutz-tests
        name: Run Winston-Lutz Tests
        <<: *bb-runner
        script:
            # set up memory monitoring
          - apt-get update && apt-get install -y --no-install-recommends procps jq
          - chmod +x memory_monitor.sh
          - nohup ./memory_monitor.sh &
          - MONITOR_PID=$!
          - uv run pytest tests_basic/test_winstonlutz.py -n 3 --junitxml=./test-reports/pytest_results.xml
          # clean up memory monitor
          - kill $MONITOR_PID
        caches:
          - winston-lutz
        condition:
          changesets:
            includePaths:
              - "pylinac/core/**"
              - "tests_basic/test_winstonlutz.py"
              - "pylinac/winston_lutz.py"
        artifacts:
          - memory_usage.log
    - step: &winston-lutz-mtmf-tests
        name: Run Winston-Lutz Multi-Target Multi-Field Tests
        <<: *bb-runner
        script:
          # set up memory monitoring
          - apt-get update && apt-get install -y --no-install-recommends procps jq
          - chmod +x memory_monitor.sh
          - nohup ./memory_monitor.sh &
          - MONITOR_PID=$!
          - uv run pytest tests_basic/test_winstonlutz_mtmf.py -n 2 --junitxml=./test-reports/pytest_results.xml
          # clean up memory monitor
          - kill $MONITOR_PID
        caches:
          - winston-lutz
        condition:
          changesets:
            includePaths:
              - "pylinac/core/**"
              - "tests_basic/test_winstonlutz_mtmf.py"
              - "pylinac/winston_lutz.py"
        artifacts:
          - memory_usage.log
    - step: &nuclear-tests
        name: Run Nuclear Tests
        <<: *bb-runner
        script:
          - uv run pytest tests_basic/test_nuclear.py --junitxml=./test-reports/pytest_results.xml
        caches:
          - nuclear
        condition:
          changesets:
            includePaths:
              - "pylinac/core/**"
              - "tests_basic/test_nuclear.py"
              - "pylinac/nuclear.py"
    - step: &plan-generator-tests
        name: Plan generator tests
        <<: *bb-runner
        script:
          - uv run pytest tests_basic/test_plan_generator.py tests_basic/test_generated_plans.py --junitxml=./test-reports/pytest_results.xml
        caches:
          - plan-generator
        condition:
            changesets:
                includePaths:
                - "pylinac/core/**"
                - "pylinac/plan_generator/**"
                - "tests_basic/test_plan_generator.py"
                - "tests_basic/test_generated_plans.py"
                - "scripts/prefab_plan_generator.py"
    - step: &core-module-tests
        name: Run core module tests
        <<: *bb-runner
        script:
          - uv run pytest tests_basic/core --junitxml=./test-reports/pytest_results.xml
        caches:
          - testfiles
        condition:
          changesets:
            includePaths:
              - "pylinac/core/**"
              - "tests_basic/core/**"
    - step: &update-dev-kraken
        name: Update Dev Kraken
        <<: *bb-runner
        script:
          - apt-get update
          - apt-get install wget -y
          # Get gcloud CLI
          - wget https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-416.0.0-linux-x86_64.tar.gz -O gcloud_cli.tar.gz
          - tar -xf gcloud_cli.tar.gz
          - ./google-cloud-sdk/install.sh --quiet
          - export PATH="./google-cloud-sdk/bin:$PATH"
          - uv venv
          - uv pip install nox
          - uv run nox -s update_dev_kraken
    - step: &run-python-39-tests
        name: Run against Python 3.9
        <<: *bb-runner
        image: ghcr.io/astral-sh/uv:bookworm
        script:
          - uv venv
          - uv pip install nox
          - uv run nox -s run_basic_test_suite_39
    - step: &run-python-310-tests
        name: Run against Python 3.10
        <<: *bb-runner
        image: ghcr.io/astral-sh/uv:bookworm
        script:
          - uv venv
          - uv pip install nox
          - uv run nox -s run_basic_test_suite_310
    - step: &run-python-311-tests
        name: Run against Python 3.11
        <<: *bb-runner
        image: ghcr.io/astral-sh/uv:bookworm
        script:
          - uv venv
          - uv pip install nox
          - uv run nox -s run_basic_test_suite_311
    - step: &run-python-312-tests
        name: Run against Python 3.12
        <<: *bb-runner
        image: ghcr.io/astral-sh/uv:bookworm
        script:
          - uv venv
          - uv pip install nox
          - uv run nox -s run_basic_test_suite_312
    - step: &run-python-313-tests
        name: Run against Python 3.13
        <<: *bb-runner
        image: ghcr.io/astral-sh/uv:bookworm
        script:
          - uv venv
          - uv pip install nox
          - uv run nox -s run_basic_test_suite_313

pipelines:

  custom:
    run-python-version-tests:
      - parallel:
          - step: *run-python-39-tests
          - step: *run-python-310-tests
          - step: *run-python-311-tests
          - step: *run-python-312-tests
          - step: *run-python-313-tests
    update-kraken:
      - step: *pre-commit-checks-and-setup
      - step: *update-dev-kraken
    publish-package:
      - step:
          name: Build & Push to PYPI
          <<: *bb-runner
          image: ghcr.io/astral-sh/uv:bookworm
          script:
            - uv build
            - uv publish  # token is an env var

  pull-requests:
    '**':
      - step: *pre-commit-checks-and-setup
      - parallel:
          - step: *build-docs
          - step: *cbct-tests
          - step: *acr-tests
          - step: *cheese-tests
          - step: *quart-tests
          - step: *planar-tests
          - step: *dlg-tests
          - step: *field-analysis-tests
          - step: *machine-log-tests
          - step: *picket-fence-tests
          - step: *starshot-tests
          - step: *calibration-tests
          - step: *vmat-tests
          - step: *winston-lutz-tests
          - step: *winston-lutz-mtmf-tests
          - step: *nuclear-tests
          - step: *plan-generator-tests
          - step: *core-module-tests

  branches:
    release*:
      - step: *push-to-github
    master:
      - step: *push-to-github
      - step: *update-dev-kraken
